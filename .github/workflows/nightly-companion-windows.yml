name: Nightly - Windows Companion

on:
  workflow_run:
    workflows: ["Nightly - Companion"]
    types:
      - completed

  workflow_dispatch:
     
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CMAKE_GENERATOR: "MSYS Makefiles"
  QT_VERSION: "5.12.9"
  MINGW_VERSION: "win64_mingw73"
  MINGW_PATH: "mingw73_64"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:      
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: git make

    - name: Install GCC 11.2
      run: | 
        wget https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-libs-11.2.0-10-any.pkg.tar.zst
        wget https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-gcc-11.2.0-10-any.pkg.tar.zst
        wget https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-crt-git-9.0.0.6448.b03cbfb95-1-any.pkg.tar.zst
        pacman -U --noconfirm mingw-w64-x86_64-gcc-libs-11.2.0-10-any.pkg.tar.zst \
                              mingw-w64-x86_64-gcc-11.2.0-10-any.pkg.tar.zst \
                              mingw-w64-x86_64-crt-git-9.0.0.6448.b03cbfb95-1-any.pkg.tar.zst

    - name: Install Dependencies
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-cmake \
                              mingw-w64-x86_64-python-pip \
                              mingw-w64-x86_64-python-pillow \
                              mingw-w64-x86_64-python-lz4 \
                              mingw-w64-x86_64-libjpeg-turbo \
                              mingw-w64-x86_64-zlib \
                              mingw-w64-x86_64-libtiff \
                              mingw-w64-x86_64-freetype \
                              mingw-w64-x86_64-lcms2 \
                              mingw-w64-x86_64-libwebp \
                              mingw-w64-x86_64-openjpeg2 \
                              mingw-w64-x86_64-libimagequant \
                              mingw-w64-x86_64-libraqm \
                              mingw-w64-x86_64-SDL \
                              mingw-w64-x86_64-clang \
                              mingw-w64-x86_64-nsis
        python -m pip install clang

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        cache: true
        cache-key-prefix: 'install-qt-action-win64'
        version: ${{ env.QT_VERSION }}
        arch: ${{ env.MINGW_VERSION }}
        tools: 'tools_opensslv3_x64'

    - name: Install ARM toolchain
      uses: fiam/arm-none-eabi-gcc@v1
      with:
        release: '6-2017-q2'
        directory: "C:/arm-none-eabi"

    - name: Check out the repo
      uses: actions/checkout@v3
    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Build
      working-directory: ${{github.workspace}}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        ls $RUNNER_WORKSPACE/Qt/Tools/ && \
        ls $RUNNER_WORKSPACE/Qt/Tools/OpenSSLv3/ && \
        mkdir output && \
        CMAKE_PREFIX_PATH=$RUNNER_WORKSPACE/Qt/$QT_VERSION/$MINGW_PATH \
        QT_TOOLS_OPENSSL_ROOT_PATH=$RUNNER_WORKSPACE/Qt/Tools/OpenSSLv3/Win_x64 \
        PATH=$PATH:/c/arm-none-eabi/bin ./tools/build-companion-nightly.sh "${{github.workspace}}" "${{github.workspace}}/output/"
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: companion-nightly
        path: ${{github.workspace}}/output
        retention-days: 1
        
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: companion-nightly
          
      - name: Display structure of downloaded files
        run: ls -R
  
      - uses: pyTooling/Actions/releaser@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'nightly'
          files: companion*.*
   
